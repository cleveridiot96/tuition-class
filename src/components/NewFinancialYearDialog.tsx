
import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { 
  generateNextFinancialYear, 
  getFinancialYears, 
  addFinancialYear, 
  setActiveFinancialYear,
  getClosingBalancesFromPreviousYear,
  saveOpeningBalances,
  OpeningBalance
} from '@/services/financialYearService';
import { format, parseISO } from 'date-fns';
import { DatePicker } from '@/components/ui/date-picker';
import { useToast } from '@/hooks/use-toast';

interface NewFinancialYearDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onYearCreated: () => void;
}

const NewFinancialYearDialog = ({ isOpen, onClose, onYearCreated }: NewFinancialYearDialogProps) => {
  const { toast } = useToast();
  const [yearName, setYearName] = useState('');
  const [startDate, setStartDate] = useState<Date | undefined>(undefined);
  const [endDate, setEndDate] = useState<Date | undefined>(undefined);
  const [importOpeningBalances, setImportOpeningBalances] = useState(true);
  const [switchToNewYear, setSwitchToNewYear] = useState(true);

  useEffect(() => {
    if (isOpen) {
      const years = getFinancialYears();
      const latestYear = years.length > 0 ? 
        years.reduce((latest, year) => 
          new Date(year.endDate) > new Date(latest.endDate) ? year : latest
        ) : null;
      
      const newYear = generateNextFinancialYear(latestYear?.id);
      setYearName(newYear.name);
      setStartDate(parseISO(newYear.startDate));
      setEndDate(parseISO(newYear.endDate));
    }
  }, [isOpen]);

  const handleCreateYear = () => {
    if (!yearName || !startDate || !endDate) {
      toast({
        title: "Validation Error",
        description: "Please fill in all required fields",
        variant: "destructive"
      });
      return;
    }
    
    try {
      const years = getFinancialYears();
      
      // Check for year name duplicates
      if (years.some(y => y.name === yearName)) {
        toast({
          title: "Validation Error",
          description: "A financial year with this name already exists",
          variant: "destructive"
        });
        return;
      }
      
      // Format dates to ISO strings
      const startDateIso = startDate.toISOString();
      const endDateIso = endDate.toISOString();
      
      const newYear = {
        id: '',  // Will be generated by addFinancialYear
        name: yearName,
        startDate: startDateIso,
        endDate: endDateIso,
        isActive: switchToNewYear,
        isSetup: false
      };
      
      const createdYear = addFinancialYear(newYear);
      
      // Handle opening balances import if selected
      if (importOpeningBalances) {
        const years = getFinancialYears();
        const previousYear = years.length > 1 ? 
          years.filter(y => y.id !== createdYear.id).reduce((latest, year) => 
            new Date(year.endDate) > new Date(latest.endDate) ? year : latest
          ) : null;
        
        if (previousYear) {
          const closingBalances = getClosingBalancesFromPreviousYear(previousYear.id);
          
          if (closingBalances) {
            // Clone and update for new year
            const openingBalances: OpeningBalance = {
              ...closingBalances,
              yearId: createdYear.id
            };
            
            saveOpeningBalances(openingBalances);
          }
        }
      }
      
      // Switch to the new year if selected
      if (switchToNewYear) {
        setActiveFinancialYear(createdYear.id);
      }
      
      toast({
        title: "Success",
        description: `Financial year ${yearName} created successfully`
      });
      
      onYearCreated();
      
      if (switchToNewYear) {
        // Force a page reload to ensure all data is refreshed
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }
    } catch (error) {
      console.error("Error creating financial year:", error);
      toast({
        title: "Error",
        description: "Failed to create financial year",
        variant: "destructive"
      });
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create New Financial Year</DialogTitle>
        </DialogHeader>
        
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="year-name" className="text-right">
              Year Name
            </Label>
            <Input
              id="year-name"
              value={yearName}
              onChange={(e) => setYearName(e.target.value)}
              className="col-span-3"
              placeholder="e.g. 2025-26"
            />
          </div>
          
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="start-date" className="text-right">
              Start Date
            </Label>
            <div className="col-span-3">
              <DatePicker
                date={startDate}
                setDate={setStartDate}
                className="w-full"
              />
            </div>
          </div>
          
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="end-date" className="text-right">
              End Date
            </Label>
            <div className="col-span-3">
              <DatePicker
                date={endDate}
                setDate={setEndDate}
                className="w-full"
              />
            </div>
          </div>
          
          <div className="grid grid-cols-4 items-center gap-4">
            <div className="col-span-4">
              <div className="flex items-center space-x-2">
                <Checkbox 
                  id="import-balances"
                  checked={importOpeningBalances}
                  onCheckedChange={(checked) => setImportOpeningBalances(checked as boolean)}
                />
                <Label htmlFor="import-balances">Import closing balances from previous year</Label>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-4 items-center gap-4">
            <div className="col-span-4">
              <div className="flex items-center space-x-2">
                <Checkbox 
                  id="switch-year"
                  checked={switchToNewYear}
                  onCheckedChange={(checked) => setSwitchToNewYear(checked as boolean)}
                />
                <Label htmlFor="switch-year">Switch to new financial year immediately</Label>
              </div>
            </div>
          </div>
        </div>
        
        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button onClick={handleCreateYear}>
            Create Financial Year
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default NewFinancialYearDialog;
